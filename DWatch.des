INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI

    counter = 0

    root = Tk()
    root.title("A Title")
    g = DWatchGUI(root, eventhandler)

    eventhandler.start()

    root.mainloop()

    exit()

STATECHART:
    A [CS][DS][ITF]
        Normal [DS]
        LightOn
        LightGoingOff
        Chrono
        GoingToEdit
        EditingHours
        EditingMinutes
        EditingSeconds
        EditingMonth
        EditingDay
        EditingYear
        DisplayAlarm
        AlarmOn
        AlarmOff
        GoingToEditAlarm
        EditingAlarmHours
        EditingAlarmMinutes
        EditingAlarmSeconds
    B [CS][DS][ITF]
        Ticking [DS]
        NotTicking
    C [CS][DS][ITF]
        NotBlinking [DS]
        BlinkOn
        BlinkOff

ENTER:
    N: A.Normal
    O: g.refreshTimeDisplay()

ENTER:
    N: A.Chrono
    O: g.refreshChronoDisplay()

TRANSITION: [2]
    S: B.Ticking
    N: B.Ticking
    T: 1
    O: g.increaseTimeByOne()

TRANSITION: [2]
    S: B.Ticking
    N: B.NotTicking
    E: stopTicking

TRANSITION: [2]
    S: B.NotTicking
    N: B.Ticking
    E: continueTicking

TRANSITION:
    S: A.Normal
    N: A.Chrono
    E: changeMode
    O: [EVENT('stopTicking')]

TRANSITION:
    S: A.Chrono
    N: A.Chrono
    T: 0.25
    O: g.increaseChronoBy250()

TRANSITION:
    S: A.Chrono
    N: A.Normal
    E: changeMode
    O: [EVENT('continueTicking')]

TRANSITION:
    S: A.Chrono
    N: A.Chrono
    E: resetChrono
    O: g.resetChrono()

TRANSITION:
    S: A.Normal
    N: A.LightOn
    E: lightOn
    O: g.setIndiglo()

TRANSITION: [3]
    S: A.LightOn
    N: A.LightGoingOff
    E: lightOff
    O: counter = 0

TRANSITION: [3]
    S: A.LightGoingOff
    N: A.LightGoingOff
    C: counter < 2
    T: 1
    O: counter += 1

TRANSITION: [3]
    S: A.LightGoingOff
    N: A.Normal
    C: counter == 2
    T: 0
    O: g.unsetIndiglo()

TRANSITION:
    S: A.Normal
    N: A.GoingToEdit
    E: editTime
    O: counter = 0

TRANSITION:
    S: A.GoingToEdit
    N: A.GoingToEdit
    C: counter < 3
    T: 0.5
    O: counter += 1

TRANSITION:
    S: A.GoingToEdit
    N: A.Normal
    E: released

TRANSITION:
    S: A.GoingToEdit
    N: A.EditingHours
    C: counter == 3
    T: 0
    O: g.startSelection()
       [EVENT('stopTicking')]

TRANSITION:
    S: A.EditingHours
    N: A.EditingHours
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingHours
    N: A.EditingMinutes
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingMinutes
    N: A.EditingMinutes
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingMinutes
    N: A.EditingSeconds
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingSeconds
    N: A.EditingSeconds
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingSeconds
    N: A.EditingMonth
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingMonth
    N: A.EditingMonth
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingMonth
    N: A.EditingDay
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingDay
    N: A.EditingDay
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingDay
    N: A.EditingYear
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingYear
    N: A.EditingYear
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingYear
    N: A.Normal
    E: finishEdit
    O: g.stopSelection()
       [EVENT('continueTicking')]

TRANSITION:
    S: A.Normal
    N: A.GoingToEditAlarm
    E: setAlarm
    O: counter = 0

TRANSITION:
    S: A.GoingToEditAlarm
    N: A.GoingToEditAlarm
    C: counter < 3
    T: 0.5
    O: counter += 1

TRANSITION:
    S: A.GoingToEditAlarm
    N: A.Normal
    E: stopInc

TRANSITION:
    S: A.GoingToEditAlarm
    N: A.EditingAlarmHours
    C: counter == 3
    T: 0
    O: g.refreshAlarmDisplay()
       g.startSelection()
       [EVENT('stopTicking')]

TRANSITION:
    S: A.EditingAlarmHours
    N: A.EditingAlarmHours
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingAlarmHours
    N: A.EditingAlarmMinutes
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingAlarmMinutes
    N: A.EditingAlarmMinutes
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingAlarmMinutes
    N: A.EditingAlarmSeconds
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingAlarmSeconds
    N: A.EditingAlarmSeconds
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingAlarmSeconds
    N: A.Normal
    E: finishEdit
    O: g.stopSelection()
       g.setAlarm()
       [EVENT('continueTicking')]
       #g.refreshAlarmDisplay()

TRANSITION: [1]
    S: C.NotBlinking
    N: C.BlinkOn
    C: g.checkTime()
    T: 0
    O: counter = 0
       print "Alarm starting"

TRANSITION: [1]
    S: C.BlinkOn
    N: C.BlinkOff
    C: counter < 8
    T: 0.5
    O: counter += 1
       g.setIndiglo()

TRANSITION: [1]
    S: C.BlinkOff
    N: C.BlinkOn
    T: 0
    O: g.unsetIndiglo()

TRANSITION: [1]
    S: C.BlinkOn
    N: C.NotBlinking
    C: counter == 8
    T: 0
    O: print "Alarm ending"
       g.setAlarm()
       #g.refreshAlarmDisplay()

TRANSITION:
    S: C.BlinkOn
    N: C.NotBlinking
    E: suppressAlarm
    O: print "Alarm suppressed"
       g.setAlarm()
       #g.refreshAlarmDisplay()

TRANSITION: [-1]
    S: C.BlinkOn
    N: C.BlinkOn
    E: switchMode # Doens't work
    O: [EVENT('suppressAlarm')]

TRANSITION: [-1]
    S: C.BlinkOff
    N: C.BlinkOff
    E: switchMode # Doesn't work
    O: [EVENT('suppressAlarm')]

TRANSITION: [-1]
    S: C.BlinkOn
    N: C.BlinkOn
    E: lightOn    # Also turns on the light
    O: [EVENT('suppressAlarm')]

TRANSITION: [-1]
    S: C.BlinkOff
    N: C.BlinkOff
    E: lightOn    # Also turns on the light
    O: [EVENT('suppressAlarm')]

TRANSITION: [-1]
    S: C.BlinkOn
    N: C.BlinkOn
    E: editTime
    O: [EVENT('suppressAlarm')]

TRANSITION: [-1]
    S: C.BlinkOff
    N: C.BlinkOff
    E: editTime
    O: [EVENT('suppressAlarm')]

TRANSITION: [-1]
    S: C.BlinkOn
    N: C.BlinkOn
    E: setAlarm
    O: [EVENT('suppressAlarm')]

TRANSITION: [-1]
    S: C.BlinkOff
    N: C.BlinkOff
    E: setAlarm
    O: [EVENT('suppressAlarm')]
