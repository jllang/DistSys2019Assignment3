INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI

    counter = 0

    root = Tk()
    root.title("A Title")
    g = DWatchGUI(root, eventhandler)

    eventhandler.start()

    root.mainloop()

    exit()

STATECHART:
    A [CS][DS][ITF]
        Normal [DS]
        LightOn
        LightGoingOff
        Chrono
        GoingToEdit
        EditingHours
        EditingMinutes
        EditingSeconds
        EditingMonth
        EditingDay
        EditingYear
        DisplayAlarm
        Blinking
        AlarmOn
        AlarmOff
        GoingToEditAlarm
        EditingAlarmHours
        EditingAlarmMinutes
        EditingAlarmSeconds
    B [CS][DS][ITF]
        Ticking [DS]
        NotTicking

TRANSITION: [1]
    S: B.Ticking
    N: B.Ticking
    T: 1
    O: g.increaseTimeByOne()

TRANSITION: [1]
    S: B.Ticking
    N: B.NotTicking
    E: print "B.Ticking -> B.NotTicking"
       stopTicking

TRANSITION: [1]
    S: B.NotTicking
    N: B.Ticking
    E: continueTicking

TRANSITION:
    S: A.LightGoingOff
    N: A.LightGoingOff
    C: counter < 2
    T: 1
    O: counter += 1

TRANSITION:
    S: A.Normal
    N: A.Chrono
    E: changeMode
    O: print "A.Normal -> A.Chrono"
       g.refreshChronoDisplay()
       [EVENT('stopTicking')]

TRANSITION:
    S: A.Chrono
    N: A.Chrono
    T: 0.25
    O: print "A.Chrono -> A.Chrono"
       g.increaseChronoBy250()
       g.refreshChronoDisplay()

TRANSITION:
    S: A.Chrono
    N: A.Normal
    E: changeMode
    O: g.refreshTimeDisplay()
       [EVENT('continueTicking')]

TRANSITION:
    S: A.Chrono
    N: A.Chrono
    E: resetChrono
    O: g.resetChrono()

TRANSITION:
    S: A.Normal
    N: A.LightOn
    E: lightOn
    O: g.setIndiglo()

TRANSITION:
    S: A.LightOn
    N: A.LightGoingOff
    E: lightOff
    O: counter = 0

TRANSITION:
    S: A.LightGoingOff
    N: A.Normal
    C: counter == 2
    T: 0
    O: print "LightGoingOff -> Normal"
       g.unsetIndiglo()

TRANSITION:
    S: A.Normal
    N: A.GoingToEdit
    E: editTime
    O: counter = 0
       print "Normal -> GoingToEdit"

TRANSITION:
    S: A.GoingToEdit
    N: A.GoingToEdit
    C: counter < 3
    T: 0.5
    O: counter += 1
       print "GoingToEdit -> GoingToEdit"

TRANSITION:
    S: A.GoingToEdit
    N: A.Normal
    E: released
    O: print "GoingToEdit -> Normal"

TRANSITION:
    S: A.GoingToEdit
    N: A.EditingHours
    C: counter == 3
    T: 0
    O: g.refreshTimeDisplay()
       g.startSelection()
       [EVENT('stopTicking')]
       print "GoingToEdit -> EditingHours"

TRANSITION:
    S: A.EditingHours
    N: A.EditingHours
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingHours
    N: A.EditingMinutes
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingMinutes
    N: A.EditingMinutes
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingMinutes
    N: A.EditingSeconds
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingSeconds
    N: A.EditingSeconds
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingSeconds
    N: A.EditingMonth
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingMonth
    N: A.EditingMonth
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingMonth
    N: A.EditingDay
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingDay
    N: A.EditingDay
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingDay
    N: A.EditingYear
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingYear
    N: A.EditingYear
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingYear
    N: A.Normal
    E: finishEdit
    O: g.stopSelection()
       [EVENT('continueTicking')]

TRANSITION:
    S: A.Normal
    N: A.GoingToEditAlarm
    E: setAlarm
    O: counter = 0
       print "Normal -> GoingToEditAlarm"

TRANSITION:
    S: A.GoingToEditAlarm
    N: A.GoingToEditAlarm
    C: counter < 3
    T: 0.5
    O: counter += 1
       print "GoingToEditAlarm -> GoingToEditAlarm"

TRANSITION:
    S: A.GoingToEditAlarm
    N: A.Normal
    E: stopInc
    O: print "GoingToEditAlarm -> Normal"

TRANSITION:
    S: A.GoingToEditAlarm
    N: A.EditingAlarmHours
    C: counter == 3
    T: 0
    O: g.refreshAlarmDisplay()
       g.startSelection()
       [EVENT('stopTicking')]
       print "GoingToEditAlarm -> EditingAlarmHours"

TRANSITION:
    S: A.EditingAlarmHours
    N: A.EditingAlarmHours
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingAlarmHours
    N: A.EditingAlarmMinutes
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingAlarmMinutes
    N: A.EditingAlarmMinutes
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingAlarmMinutes
    N: A.EditingAlarmSeconds
    E: finishEdit
    O: g.selectNext()

TRANSITION:
    S: A.EditingAlarmSeconds
    N: A.EditingAlarmSeconds
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: A.EditingAlarmSeconds
    N: A.Normal
    E: finishEdit
    O: g.stopSelection()
       [EVENT('continueTicking')]

TRANSITION:
    S: A.Normal
    N: A.Blinking
    C: g.checkTime()
    T: 0
    O: counter = 0

TRANSITION:
    S: A.Blinking
    N: A.Blinking
    C: counter < 8 and counter % 2 == 0
    T: 0.0
    O: counter += counter
       g.setIndiglo()

TRANSITION:
    S: A.Blinking
    N: A.Blinking
    C: counter < 8 and counter % 2 == 1
    T: 0.5
    O: counter += counter
       g.unsetIndiglo()

TRANSITION:
    S: A.Blinking
    N: A.Normal
    C: counter == 8
    O: g.setAlarm()
       g.refreshTimeDisplay()